# coding: utf-8

"""
    ngsi-v2

    NGSI V2 API

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class QueryPattern(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, id_pattern=None, type=None, type_pattern=None):
        """
        QueryPattern - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'id_pattern': 'str',
            'type': 'str',
            'type_pattern': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'id_pattern': 'idPattern',
            'type': 'type',
            'type_pattern': 'typePattern'
        }

        self._id = id
        self._id_pattern = id_pattern
        self._type = type
        self._type_pattern = type_pattern


    @property
    def id(self):
        """
        Gets the id of this QueryPattern.


        :return: The id of this QueryPattern.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this QueryPattern.


        :param id: The id of this QueryPattern.
        :type: str
        """

        self._id = id

    @property
    def id_pattern(self):
        """
        Gets the id_pattern of this QueryPattern.


        :return: The id_pattern of this QueryPattern.
        :rtype: str
        """
        return self._id_pattern

    @id_pattern.setter
    def id_pattern(self, id_pattern):
        """
        Sets the id_pattern of this QueryPattern.


        :param id_pattern: The id_pattern of this QueryPattern.
        :type: str
        """

        self._id_pattern = id_pattern

    @property
    def type(self):
        """
        Gets the type of this QueryPattern.


        :return: The type of this QueryPattern.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this QueryPattern.


        :param type: The type of this QueryPattern.
        :type: str
        """

        self._type = type

    @property
    def type_pattern(self):
        """
        Gets the type_pattern of this QueryPattern.


        :return: The type_pattern of this QueryPattern.
        :rtype: str
        """
        return self._type_pattern

    @type_pattern.setter
    def type_pattern(self, type_pattern):
        """
        Sets the type_pattern of this QueryPattern.


        :param type_pattern: The type_pattern of this QueryPattern.
        :type: str
        """

        self._type_pattern = type_pattern

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
